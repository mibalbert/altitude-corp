generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
  // relationMode = "prisma"
  // provider = "sqlite"
  // url = "file:./db-file"
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String?
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String    @id @default(uuid())
  sessionToken String?   @unique
  userId       String?
  expires      DateTime?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  username      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  id         String    @id @default(uuid())
  identifier String?
  token      String?   @unique
  expires    DateTime?

  @@unique([identifier, token])
}

model Reviews {
  id      Int     @id @default(autoincrement())
  author  String?
  quote   String?
  company String?
}

model Folder {
  id           Int     @id @default(autoincrement())
  title        String?
  userId       String?
  icon         String?
  parentFolder Int?
  posts        Post[]
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String?
  content     String?
  coverImage  String?
  isArchived  Boolean? @default(false)
  isPublished Boolean  @default(false)
  isFeatured  Boolean? @default(false)
  position    Int?
  publicId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    Int?
  author      User?    @relation(fields: [authorEmail], references: [email])
  authorEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorEmail])
  @@index([folderId])
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  coverImage  String?
  isArchived  Boolean? @default(false)
  isFeatured  Boolean? @default(false)
  position    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageObject {
  id         Int     @id @default(autoincrement())
  page       String?
  type       String?
  title      String?
  compName   String?
  className  String?
  value      String?
  parentComp String?

  @@map("page_object") // Specify the database table name if needed
}

model Subscriber {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String?
  subscribedAt DateTime @default(now())
}

// model PathnameAnalytics {
//   id       Int       @id @default(autoincrement())
//   pathname String?   @unique
//   visitors Visitor[]
// }

// model Visitor {
//   id                Int                @id @default(autoincrement())
//   visitorCountry    String?
//   visitorCounty     String?
//   visitorCity       String?
//   viewedAt          DateTime           @default(now())
//   pathnameId        Int?
//   pathnameAnalytics PathnameAnalytics? @relation(fields: [pathnameId], references: [id])
// }


model Visitor {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
}
