// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id   String @id @default(uuid())
  userId           String? 
  type             String?
  provider         String?
  providerAccountId String?
  refresh_token    String? 
  access_token     String? 
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? 
  session_state    String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id   String @id @default(uuid())
  sessionToken  String?   @unique
  userId       String?   
  expires      DateTime?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id   String @id @default(uuid())
  username      String? @db.VarChar(255)
  name          String? 
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  id   String @id @default(uuid())
  identifier String?
  token      String?  @unique
  expires    DateTime?

  @@unique([identifier, token])
}


model Home {
    id        Int     @id @default(autoincrement())
  heroTitle  String?  @db.LongText
  heroSub    String?  @db.LongText
  heroButton String?


}

model Folder {
  id             Int      @id @default(autoincrement())
  title          String?
  userId         String?
  icon           String?
  posts          Post[]
  parentFolder   Int?
  // folders         Folder[] @relation("folders")
  // foldersRelation Folder[] @relation("folders")

}


model Post {
  id           String    @id @default(uuid())
  title        String?
  content      String?
  coverImage   String?
  isArchived   Boolean?
  isPublished  Boolean
  publicId     String?
  folder       Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId     Int?   
  author       User?     @relation(fields: [authorEmail], references: [email])
  authorEmail  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([authorEmail])
  @@index([folderId])
}
